// Equivalent output to https://learnopengl.com/Getting-started/Coordinate-Systems

include "../../includes/math3d.tt";

// create window
ray::InitWindow(800, 600, "Getting Started - Coordinate Systems");
ray::SetTargetFPS(60);

ray::rlClearColor(51, 77, 77, 255);

// load the shader for tutorial 2
i32 program = shader::load("coordinate_systems.vs", "coordinate_systems.fs");

// create vertices and load them to a vertex buffer object
vec<f32> verts = [
	// positions       // texture coords
    -0.5, -0.5, -0.5,  0.0, 0.0,
     0.5, -0.5, -0.5,  1.0, 0.0,
     0.5,  0.5, -0.5,  1.0, 1.0,
     0.5,  0.5, -0.5,  1.0, 1.0,
    -0.5,  0.5, -0.5,  0.0, 1.0,
    -0.5, -0.5, -0.5,  0.0, 0.0,

    -0.5, -0.5,  0.5,  0.0, 0.0,
     0.5, -0.5,  0.5,  1.0, 0.0,
     0.5,  0.5,  0.5,  1.0, 1.0,
     0.5,  0.5,  0.5,  1.0, 1.0,
    -0.5,  0.5,  0.5,  0.0, 1.0,
    -0.5, -0.5,  0.5,  0.0, 0.0,

    -0.5,  0.5,  0.5,  1.0, 0.0,
    -0.5,  0.5, -0.5,  1.0, 1.0,
    -0.5, -0.5, -0.5,  0.0, 1.0,
    -0.5, -0.5, -0.5,  0.0, 1.0,
    -0.5, -0.5,  0.5,  0.0, 0.0,
    -0.5,  0.5,  0.5,  1.0, 0.0,

     0.5,  0.5,  0.5,  1.0, 0.0,
     0.5,  0.5, -0.5,  1.0, 1.0,
     0.5, -0.5, -0.5,  0.0, 1.0,
     0.5, -0.5, -0.5,  0.0, 1.0,
     0.5, -0.5,  0.5,  0.0, 0.0,
     0.5,  0.5,  0.5,  1.0, 0.0,

    -0.5, -0.5, -0.5,  0.0, 1.0,
     0.5, -0.5, -0.5,  1.0, 1.0,
     0.5, -0.5,  0.5,  1.0, 0.0,
     0.5, -0.5,  0.5,  1.0, 0.0,
    -0.5, -0.5,  0.5,  0.0, 0.0,
    -0.5, -0.5, -0.5,  0.0, 1.0,

    -0.5,  0.5, -0.5,  0.0, 1.0,
     0.5,  0.5, -0.5,  1.0, 1.0,
     0.5,  0.5,  0.5,  1.0, 0.0,
     0.5,  0.5,  0.5,  1.0, 0.0,
    -0.5,  0.5,  0.5,  0.0, 0.0,
    -0.5,  0.5, -0.5,  0.0, 1.0
	 ];
	 
vec<f32> cubes_x = [0, 2, -1.5, -3.8, 2.4, -1.7, 1.3, 1.5, 1.5, -1.3];
vec<f32> cubes_y = [0, 5, -2.2, -2, -0.4, 3, -2, 2, 0.2, 1];
vec<f32> cubes_z = [0, -15, -2.5, -12.3, -3.5, -7.5, -2.5, -2.5, -1.5, -1.5];

i32 vao = ray::rlLoadVertexArray();
ray::rlEnableVertexArray(vao);

i32 vbo = ray::rlLoadVertexBuffer(verts, false);

i32 SZ_FLOAT = 4;

// position attribute
ray::rlSetVertexAttribute(0, 3, RL_FLOAT, false, 5 * SZ_FLOAT, 0);
ray::rlEnableVertexAttribute(0);

// texture coord attribute
ray::rlSetVertexAttribute(1, 2, RL_FLOAT, false, 5 * SZ_FLOAT, 3 * SZ_FLOAT);
ray::rlEnableVertexAttribute(1);

// texture 1
ray_texture texture1 = ray::LoadTexture("../../assets/container.png");
i32 texid1 = ray::GetTextureId(texture1);

// texture 2
ray_image image2 = ray::LoadImage("../../assets/awesomeface.png");
ray::ImageFlipVertical(image2);
ray_texture texture2 = ray::LoadTextureFromImage(image2);
i32 texid2 = ray::GetTextureId(texture2);
ray::UnloadImage(image2);

// map sampler uniforms to texture slots
shader::enable(program);
shader::set_i32(program, "texture1", 0);
shader::set_i32(program, "texture2", 1);

ray::rlDisableBackfaceCulling();
ray::rlEnableDepthTest();

f64 t_start = clock();

mat4 proj = mat4_perspective(deg2rad(45), 800 / 600, 0.1, 100);
mat4 view = mat4_translate(0, 0, -3);

// main loop
loop {
	
	// rendering
	ray::BeginDrawing();
		ray::rlClearScreenBuffers();
		
		shader::enable(program);
			ray::rlActiveTextureSlot(0);
			ray::rlEnableTexture(texid1);
			ray::rlActiveTextureSlot(1);
			ray::rlEnableTexture(texid2);
			ray::rlEnableVertexArray(vao);
			for i in 10 {
				mat4 MVP = mat4_identity();
				MVP = mat4_rotate(deg2rad(20 * i), vec3_norm(vec3_new(1, 0.3, 0.5)));
				MVP = mat4_multm(mat4_translate(cubes_x[i], cubes_y[i], cubes_z[i]), MVP);
				MVP = mat4_multm(view, MVP);
				MVP = mat4_multm(proj, MVP);
				shader::set_mat4(program, "transform", MVP);
				ray::rlDrawVertexArray(0, 36);
			}
			ray::rlDisableVertexArray();
		shader::disable();

	ray::EndDrawing();

	// check for window close event
	if ray::WindowShouldClose() { break; }
	
}

ray::rlUnloadVertexArray(vao);
ray::rlUnloadVertexBuffer(vbo);
ray::rlUnloadShaderProgram(program);
ray::UnloadTexture(texture1);
ray::UnloadTexture(texture2);

ray::CloseWindow();


//-----------------------------------------------------------------------------
// shader utilities
//-----------------------------------------------------------------------------

def i32 shader::load(string vs, string fs) {
	return ray::rlLoadShaderCode(file::readstring(vs), file::readstring(fs));
}

def shader::enable(i32 program) {
	ray::rlEnableShader(program);
}

def shader::disable() {
	ray::rlDisableShader();
}

def shader::set_bool(i32 program, string name, bool val) {
	ray::rlSetUniform(ray::rlGetLocationUniform(program, name), [ val as i32 ], RL_SHADER_UNIFORM_INT);
}

def shader::set_i32(i32 program, string name, i32 val) {
	ray::rlSetUniform(ray::rlGetLocationUniform(program, name), [ val ], RL_SHADER_UNIFORM_INT);
}

def shader::set_f32(i32 program, string name, f32 val) {
	ray::rlSetUniform(ray::rlGetLocationUniform(program, name), [ val ], RL_SHADER_UNIFORM_FLOAT);
}

def shader::set_mat4(i32 program, string name, mat4 mat) {
	ray::rlSetUniformMatrix(ray::rlGetLocationUniform(program, name), mat);
}
